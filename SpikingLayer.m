classdef SpikingLayer < nnet.layer.Layer ...
        & nnet.layer.Formattable
    %SPIKINGLAYER Add spiking behavior on a layer

    %   Copyright 2023 The MathWorks, Inc.
    
    properties
        % Threshold
        % Numeric scalar which is used as the membrane voltage
        % threshold, above which spikes are produced.
        Threshold
    end

    properties (State)
        % MembraneVoltage
        % State parameter which indicates the current membrane voltage on
        % layer nodes.
        MembraneVoltage

        % SumSpikes
        % State parameter which indicates the accumulated number
        % of spikes on each node during a simulation.
        SumSpikes
    end

    properties (Learnable)
        % MainLayer
        % Holds the underlying layer type that spikining behavior
        % is wrapped around.
        UnderlyingNetwork    
    end
    
    methods
        function layer = SpikingLayer(mainLayer,threshold)
            %SPIKINGLAYER Construct an instance of a SpikingLayer
            
            % Parse input arguments.
            arguments
                mainLayer (1,1) nnet.cnn.layer.Layer
                threshold (1,1) {mustBeNumeric} = 1.5;
            end
            
            % Set layer name and description.
            layer.Name = mainLayer.Name;
            layer.Description = "Spiking " + metaclass(mainLayer).Description;

            % Set layer parameters and main layer.
            layer.Threshold = threshold;
            layer.UnderlyingNetwork = dlnetwork(mainLayer,Initialize=false);

            % Initialize state variables.
            layer = layer.initializeState();
        end
        
        function [Z,stateMembraneVoltage,stateSumSpikes] = predict(layer,X)
            % PREDICT Predict method for a spiking layer. Extends the main 
            % layer's predict method by adding logic to transmit the
            % impulse.
            impulse = predict(layer.UnderlyingNetwork,X);

            % Transmit the impulse.
            [Z,stateMembraneVoltage,stateSumSpikes] = layer.transmitImpulse(impulse);
        end

        function [Z,newMembraneVoltage,newSumSpikes] = transmitImpulse(layer,impulse)
            % TRANSMITIMPULSE  Transmits the impulse generated by the
            % predict method through the layer.
            % First, the impulse is added to the membrane voltage.
            % Then the membrane voltage is checked against the layer's
            % threshold, and if it exceeds the threshold are produced. 
            % Then the membrane voltages nodes where spikes were produced
            % are reset to 0.
            newMembraneVoltage = layer.MembraneVoltage + impulse;
            Z = newMembraneVoltage >= layer.Threshold;
            newMembraneVoltage(Z) = 0;
            newSumSpikes = stripdims(layer.SumSpikes + Z);
            newMembraneVoltage = stripdims(newMembraneVoltage);
            Z = cast(Z,like=impulse);
        end

        function layer = initializeState(layer)
            % RESETSTATE Reset layer state. This initializes the SumSpikes
            % and MembraneVoltage states to zeros.
            layer.SumSpikes = 0;
            layer.MembraneVoltage = 0;
        end
    end
end